service: lamda-serverless
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: Jareer
  lambdaHashingVersion: 20201221
  environment:
    tableName: ${self:custom.TableName}
    bucketName: ${self:custom.BucketName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'
  # API KEY
  apiGateway:
    apiKeys:
      - free:
          - myFreeKey
      - paid:
          - myPaidKey
    usagePlan:
      - free:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            burstLimit: 5
            rateLimit: 20
      - paid:
          quota:
            limit: 10000
            period: MONTH
          throttle:
            burstLimit: 50
            rateLimit: 20


functions:
  hello:
    handler: handler.hello
    events:
     - httpApi:
         path: /
         method: get

  imageResize:
    handler: handler.imageResize
    events:
     - httpApi:
         path: /imageResize
         method: get

  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
     - http:
        path: get-user/{ID}
        method: GET
        cors: true
        private: true

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
     - http:
        path: get-player-score/{ID}
        method: GET
        cors: true

  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
     - http:
        path: create-player-score/{ID}
        method: POST
        cors: true

  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
     - http:
        path: create-file/{fileName}
        method: POST
        cors: true

  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
     - http:
        path: get-file/{fileName}
        method: GET
        cors: true

  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: chunk-norris/{proxy+}
          method: ANY
          integration: http-proxy
          private: true
          request:
              uri: http://api.icndb.com/{proxy}
              parameters:
                paths:
                  proxy: true

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
     - http:
        path: send-email
        method: POST
        cors: true

  graphql:
    handler: gql.graphqlHandler
    events:
      - http:
          path: "graphql"
          method: any
          cors: true

plugins:
    - serverless-offline
    - serverless-s3-sync
    # - serverless-webpack

package:
  individually: true

custom:
  TableName: player-scores
  BucketName: jareerserverlessprojectbucket-321321
  s3Sync:
        - bucketName: ${self:custom.BucketName}
          localDir: Uploads

resources:
    Resources:
      #AWS S3 Bucket 
      DemoBucketUpload:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:custom.BucketName}

      # Dynamo DB
      MyDynamoDbTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:custom.TableName}
          AttributeDefinitions:
            - AttributeName: ID
              AttributeType: S
          KeySchema:
            - AttributeName: ID
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST

      myAssumeRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: myAssumeRole   
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement: 
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                      - apigateway.amazonaws.com
                  Action:
                      - sts:AssumeRole

